-- 산업안전 점검 시스템 데이터베이스 스키마
-- Oracle Database용 테이블 생성 스크립트

-- 1. 검사 정보 테이블
CREATE TABLE INSPECTIONS (
    ID VARCHAR2(36) PRIMARY KEY,
    USER_NAME VARCHAR2(100) NOT NULL,
    LOCATION VARCHAR2(200) NOT NULL,
    INSPECTION_DATE DATE NOT NULL,
    TOTAL_ITEMS NUMBER(3) DEFAULT 0,
    COMPLETED_ITEMS NUMBER(3) DEFAULT 0,
    OVERALL_SCORE NUMBER(3) DEFAULT 0,
    STATUS VARCHAR2(20) DEFAULT 'CREATED' CHECK (STATUS IN ('CREATED', 'IN_PROGRESS', 'COMPLETED', 'FAILED')),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 검사 정보 테이블 인덱스
CREATE INDEX IDX_INSPECTIONS_USER ON INSPECTIONS(USER_NAME);
CREATE INDEX IDX_INSPECTIONS_DATE ON INSPECTIONS(INSPECTION_DATE);
CREATE INDEX IDX_INSPECTIONS_STATUS ON INSPECTIONS(STATUS);
CREATE INDEX IDX_INSPECTIONS_CREATED ON INSPECTIONS(CREATED_AT);

-- 검사 정보 테이블 코멘트
COMMENT ON TABLE INSPECTIONS IS '안전 점검 기본 정보 테이블';
COMMENT ON COLUMN INSPECTIONS.ID IS '검사 고유 ID (UUID)';
COMMENT ON COLUMN INSPECTIONS.USER_NAME IS '점검 수행자 이름';
COMMENT ON COLUMN INSPECTIONS.LOCATION IS '점검 위치/장소';
COMMENT ON COLUMN INSPECTIONS.INSPECTION_DATE IS '점검 수행 날짜';
COMMENT ON COLUMN INSPECTIONS.TOTAL_ITEMS IS '총 점검 항목 수';
COMMENT ON COLUMN INSPECTIONS.COMPLETED_ITEMS IS '완료된 점검 항목 수';
COMMENT ON COLUMN INSPECTIONS.OVERALL_SCORE IS '전체 안전 점수 (0-100)';
COMMENT ON COLUMN INSPECTIONS.STATUS IS '검사 상태 (CREATED/IN_PROGRESS/COMPLETED/FAILED)';

-- 2. 점검 항목 테이블
CREATE TABLE INSPECTION_ITEMS (
    ID VARCHAR2(36) PRIMARY KEY,
    NAME VARCHAR2(200) NOT NULL,
    PROMPT CLOB NOT NULL,
    CATEGORY VARCHAR2(50) DEFAULT 'GENERAL',
    IS_ACTIVE NUMBER(1) DEFAULT 1 CHECK (IS_ACTIVE IN (0, 1)),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 점검 항목 테이블 인덱스
CREATE INDEX IDX_ITEMS_CATEGORY ON INSPECTION_ITEMS(CATEGORY);
CREATE INDEX IDX_ITEMS_ACTIVE ON INSPECTION_ITEMS(IS_ACTIVE);
CREATE INDEX IDX_ITEMS_NAME ON INSPECTION_ITEMS(NAME);

-- 점검 항목 테이블 코멘트
COMMENT ON TABLE INSPECTION_ITEMS IS '점검 항목 마스터 테이블';
COMMENT ON COLUMN INSPECTION_ITEMS.ID IS '점검 항목 고유 ID (UUID)';
COMMENT ON COLUMN INSPECTION_ITEMS.NAME IS '점검 항목명';
COMMENT ON COLUMN INSPECTION_ITEMS.PROMPT IS 'AI 분석용 프롬프트';
COMMENT ON COLUMN INSPECTION_ITEMS.CATEGORY IS '점검 항목 카테고리 (PPE/EQUIPMENT/ENVIRONMENT/등)';
COMMENT ON COLUMN INSPECTION_ITEMS.IS_ACTIVE IS '활성화 상태 (1:활성/0:비활성)';

-- 3. 검사 결과 테이블
CREATE TABLE INSPECTION_RESULTS (
    ID VARCHAR2(36) PRIMARY KEY,
    INSPECTION_ID VARCHAR2(36) NOT NULL,
    ITEM_ID VARCHAR2(36) NOT NULL,
    IMAGE_PATH VARCHAR2(500) NOT NULL,
    AI_ANALYSIS CLOB,
    COMPLIANCE_SCORE NUMBER(3) DEFAULT 0 CHECK (COMPLIANCE_SCORE BETWEEN 0 AND 100),
    ISSUES_FOUND CLOB,  -- JSON 형태로 저장
    RECOMMENDATIONS CLOB,  -- JSON 형태로 저장
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- 외래키 제약조건
    CONSTRAINT FK_RESULTS_INSPECTION FOREIGN KEY (INSPECTION_ID) REFERENCES INSPECTIONS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_RESULTS_ITEM FOREIGN KEY (ITEM_ID) REFERENCES INSPECTION_ITEMS(ID)
);

-- 검사 결과 테이블 인덱스
CREATE INDEX IDX_RESULTS_INSPECTION ON INSPECTION_RESULTS(INSPECTION_ID);
CREATE INDEX IDX_RESULTS_ITEM ON INSPECTION_RESULTS(ITEM_ID);
CREATE INDEX IDX_RESULTS_SCORE ON INSPECTION_RESULTS(COMPLIANCE_SCORE);
CREATE INDEX IDX_RESULTS_CREATED ON INSPECTION_RESULTS(CREATED_AT);

-- 검사 결과 테이블 코멘트
COMMENT ON TABLE INSPECTION_RESULTS IS '점검 결과 상세 정보 테이블';
COMMENT ON COLUMN INSPECTION_RESULTS.ID IS '결과 고유 ID (UUID)';
COMMENT ON COLUMN INSPECTION_RESULTS.INSPECTION_ID IS '검사 ID (INSPECTIONS 테이블 참조)';
COMMENT ON COLUMN INSPECTION_RESULTS.ITEM_ID IS '점검 항목 ID (INSPECTION_ITEMS 테이블 참조)';
COMMENT ON COLUMN INSPECTION_RESULTS.IMAGE_PATH IS '분석된 이미지 파일 경로';
COMMENT ON COLUMN INSPECTION_RESULTS.AI_ANALYSIS IS 'AI 분석 결과 전문';
COMMENT ON COLUMN INSPECTION_RESULTS.COMPLIANCE_SCORE IS '규정 준수 점수 (0-100점)';
COMMENT ON COLUMN INSPECTION_RESULTS.ISSUES_FOUND IS '발견된 문제점 목록 (JSON)';
COMMENT ON COLUMN INSPECTION_RESULTS.RECOMMENDATIONS IS '개선 권고사항 목록 (JSON)';

-- 4. 이미지 정보 테이블
CREATE TABLE INSPECTION_IMAGES (
    ID VARCHAR2(36) PRIMARY KEY,
    INSPECTION_ID VARCHAR2(36) NOT NULL,
    ORIGINAL_NAME VARCHAR2(255) NOT NULL,
    FILE_NAME VARCHAR2(255) NOT NULL,
    FILE_PATH VARCHAR2(500) NOT NULL,
    FILE_SIZE NUMBER(12) DEFAULT 0,
    MIME_TYPE VARCHAR2(100) DEFAULT 'image/jpeg',
    UPLOAD_STATUS VARCHAR2(20) DEFAULT 'UPLOADED' CHECK (UPLOAD_STATUS IN ('UPLOADED', 'PROCESSED', 'FAILED')),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- 외래키 제약조건
    CONSTRAINT FK_IMAGES_INSPECTION FOREIGN KEY (INSPECTION_ID) REFERENCES INSPECTIONS(ID) ON DELETE CASCADE
);

-- 이미지 정보 테이블 인덱스
CREATE INDEX IDX_IMAGES_INSPECTION ON INSPECTION_IMAGES(INSPECTION_ID);
CREATE INDEX IDX_IMAGES_STATUS ON INSPECTION_IMAGES(UPLOAD_STATUS);
CREATE INDEX IDX_IMAGES_CREATED ON INSPECTION_IMAGES(CREATED_AT);

-- 이미지 정보 테이블 코멘트
COMMENT ON TABLE INSPECTION_IMAGES IS '업로드된 이미지 파일 정보 테이블';
COMMENT ON COLUMN INSPECTION_IMAGES.ID IS '이미지 고유 ID (UUID)';
COMMENT ON COLUMN INSPECTION_IMAGES.INSPECTION_ID IS '검사 ID (INSPECTIONS 테이블 참조)';
COMMENT ON COLUMN INSPECTION_IMAGES.ORIGINAL_NAME IS '원본 파일명';
COMMENT ON COLUMN INSPECTION_IMAGES.FILE_NAME IS '서버 저장 파일명';
COMMENT ON COLUMN INSPECTION_IMAGES.FILE_PATH IS '파일 저장 경로';
COMMENT ON COLUMN INSPECTION_IMAGES.FILE_SIZE IS '파일 크기 (바이트)';
COMMENT ON COLUMN INSPECTION_IMAGES.MIME_TYPE IS '파일 MIME 타입';
COMMENT ON COLUMN INSPECTION_IMAGES.UPLOAD_STATUS IS '업로드 상태';

-- 5. 사용자 테이블 (확장용)
CREATE TABLE USERS (
    ID VARCHAR2(36) PRIMARY KEY,
    USERNAME VARCHAR2(50) UNIQUE NOT NULL,
    EMAIL VARCHAR2(100) UNIQUE NOT NULL,
    PASSWORD_HASH VARCHAR2(255) NOT NULL,
    FULL_NAME VARCHAR2(100),
    ROLE VARCHAR2(20) DEFAULT 'USER' CHECK (ROLE IN ('USER', 'ADMIN', 'SUPERVISOR')),
    IS_ACTIVE NUMBER(1) DEFAULT 1 CHECK (IS_ACTIVE IN (0, 1)),
    LAST_LOGIN TIMESTAMP,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 사용자 테이블 인덱스
CREATE INDEX IDX_USERS_USERNAME ON USERS(USERNAME);
CREATE INDEX IDX_USERS_EMAIL ON USERS(EMAIL);
CREATE INDEX IDX_USERS_ROLE ON USERS(ROLE);
CREATE INDEX IDX_USERS_ACTIVE ON USERS(IS_ACTIVE);

-- 사용자 테이블 코멘트
COMMENT ON TABLE USERS IS '시스템 사용자 정보 테이블';
COMMENT ON COLUMN USERS.ID IS '사용자 고유 ID (UUID)';
COMMENT ON COLUMN USERS.USERNAME IS '사용자명 (로그인 ID)';
COMMENT ON COLUMN USERS.EMAIL IS '이메일 주소';
COMMENT ON COLUMN USERS.PASSWORD_HASH IS '암호화된 비밀번호';
COMMENT ON COLUMN USERS.FULL_NAME IS '사용자 실명';
COMMENT ON COLUMN USERS.ROLE IS '사용자 권한 (USER/ADMIN/SUPERVISOR)';
COMMENT ON COLUMN USERS.IS_ACTIVE IS '계정 활성화 상태';
COMMENT ON COLUMN USERS.LAST_LOGIN IS '마지막 로그인 시간';

-- 6. 시스템 설정 테이블
CREATE TABLE SYSTEM_SETTINGS (
    ID VARCHAR2(36) PRIMARY KEY,
    SETTING_KEY VARCHAR2(100) UNIQUE NOT NULL,
    SETTING_VALUE CLOB,
    SETTING_TYPE VARCHAR2(20) DEFAULT 'STRING' CHECK (SETTING_TYPE IN ('STRING', 'NUMBER', 'BOOLEAN', 'JSON')),
    DESCRIPTION VARCHAR2(500),
    IS_ACTIVE NUMBER(1) DEFAULT 1 CHECK (IS_ACTIVE IN (0, 1)),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 시스템 설정 테이블 인덱스
CREATE INDEX IDX_SETTINGS_KEY ON SYSTEM_SETTINGS(SETTING_KEY);
CREATE INDEX IDX_SETTINGS_TYPE ON SYSTEM_SETTINGS(SETTING_TYPE);
CREATE INDEX IDX_SETTINGS_ACTIVE ON SYSTEM_SETTINGS(IS_ACTIVE);

-- 시스템 설정 테이블 코멘트
COMMENT ON TABLE SYSTEM_SETTINGS IS '시스템 설정 정보 테이블';
COMMENT ON COLUMN SYSTEM_SETTINGS.SETTING_KEY IS '설정 키';
COMMENT ON COLUMN SYSTEM_SETTINGS.SETTING_VALUE IS '설정 값';
COMMENT ON COLUMN SYSTEM_SETTINGS.SETTING_TYPE IS '설정 값 타입';
COMMENT ON COLUMN SYSTEM_SETTINGS.DESCRIPTION IS '설정 설명';

-- 7. 업데이트 트리거 생성 (UPDATED_AT 자동 갱신)
CREATE OR REPLACE TRIGGER TRG_INSPECTIONS_UPDATE
    BEFORE UPDATE ON INSPECTIONS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER TRG_ITEMS_UPDATE
    BEFORE UPDATE ON INSPECTION_ITEMS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER TRG_USERS_UPDATE
    BEFORE UPDATE ON USERS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER TRG_SETTINGS_UPDATE
    BEFORE UPDATE ON SYSTEM_SETTINGS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- 시퀀스 생성 (필요시)
CREATE SEQUENCE SEQ_INSPECTION_NUMBER START WITH 1 INCREMENT BY 1 NOCACHE;

-- 테이블 생성 완료 메시지
SELECT 'Database schema created successfully!' AS MESSAGE FROM DUAL;